name: Deploy

on:
  push:
    branches:
      - feature/docker-stack
    
jobs:
  build:
    runs-on: [ self-hosted, production ]
    environment: development
    steps:
      - name: Синхронизация проекта с репозиторием
        uses: actions/checkout@v4

      - name: Запись секретов в директорию config
        run: |
          mkdir ${{ github.workspace }}/config
          
          cat <<EOF > ${{ github.workspace }}/config/.env.backend
          ENVIRONMENT=${{ vars.ENVIRONMENT }}
          BACKEND_HOST=${{ vars.BACKEND_HOST }}
          BACKEND_PORT=${{ vars.BACKEND_PORT }}
          FRONTEND_HOST=${{ vars.FRONTEND_HOST }}
          FRONTEND_PORT=${{ vars.FRONTEND_PORT }}
          EOF

          cat <<EOF > ${{ github.workspace }}/config/.env.pg
          POSTGRES_HOST=${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
          POSTGRES_DB=${{ vars.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          EOF

          cat <<EOF > ${{ github.workspace }}/config/.env.redis
          REDIS_HOST=${{ vars.REDIS_HOST }}
          REDIS_PORT=${{ vars.REDIS_PORT }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          EOF

      - name: Сборка образов и пуш
        run: |
          docker build -t dev.registry.local:5000/frontend:latest -f frontend/Dockerfile frontend/
          docker build -t dev.registry.local:5000/backend:latest -f backend/Dockerfile backend/
          docker push dev.registry.local:5000/frontend:latest
          docker push dev.registry.local:5000/backend:latest
  test:
    needs: build
    runs-on: [ self-hosted, development ]
    steps:
      - name: Тут будут тесты
        run: sleep 10
  
  stage:
    needs: test
    runs-on: [ self-hosted, development ]
    steps:
      - name: Тестовый запуск проекта
        run: |
          ENV=DEV \
          docker stack deploy -c stack.yml dev
